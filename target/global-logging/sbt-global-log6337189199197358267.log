[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\PolyakovMA\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\PolyakovMA\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.2 (Amazon.com Inc. Java 1.8.0_332)
[debug]       Load.loadUnit: plugins took 76.572ms
[debug]       Load.loadUnit: defsScala took 0.3812ms
[debug] [Loading] Scanning directory C:\Users\PolyakovMA\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\PolyakovMA\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 14.8784 ms
[debug]           Load.resolveProject(global-plugins) took 50.8445ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\PolyakovMA\.sbt\1.0\plugins, plugins: List(<none>))) took 86.285ms
[debug] [Loading] Done in C:\Users\PolyakovMA\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 106.4057ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3012ms
[debug]     Load.loadUnit(file:/C:/Users/PolyakovMA/.sbt/1.0/plugins/, ...) took 287.2385ms
[debug]   Load.apply: load took 466.5833ms
[debug]   Load.apply: resolveProjects took 6.2574ms
[debug]   Load.apply: finalTransforms took 78.0999ms
[debug]   Load.apply: config.delegates took 8.6832ms
[debug]   Load.apply: Def.make(settings)... took 548.4317ms
[debug]   Load.apply: structureIndex took 163.4257ms
[debug]   Load.apply: mkStreams took 10.3969ms
[info] loading global plugins from C:\Users\PolyakovMA\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2769.5899ms
[debug]           Load.loadUnit: plugins took 27.3754ms
[debug]           Load.loadUnit: defsScala took 0.0154ms
[debug] [Loading] Scanning directory C:\Users\PolyakovMA\Desktop\project_code\code\project
[debug]             Load.loadUnit: mkEval took 17.0138ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\PolyakovMA\Desktop\project_code\code\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.0767 ms
[info] loading settings for project code-build from plugins.sbt,idea.sbt ...
[debug]               Load.resolveProject(code-build) took 10.0344ms
[debug]             Load.loadTransitive: finalizeProject(Project(id code-build, base: C:\Users\PolyakovMA\Desktop\project_code\code\project, plugins: List(<none>))) took 12.7012ms
[debug] [Loading] Done in C:\Users\PolyakovMA\Desktop\project_code\code\project, returning: (code-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2932.1506ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.4648ms
[debug]         Load.loadUnit(file:/C:/Users/PolyakovMA/Desktop/project_code/code/project/, ...) took 2965.3777ms
[debug]       Load.apply: load took 2967.3339ms
[debug]       Load.apply: resolveProjects took 0.1412ms
[debug]       Load.apply: finalTransforms took 9.562ms
[debug]       Load.apply: config.delegates took 0.3976ms
[debug]       Load.apply: Def.make(settings)... took 90.7753ms
[debug]       Load.apply: structureIndex took 22.7647ms
[debug]       Load.apply: mkStreams took 0.0041ms
[info] loading project definition from C:\Users\PolyakovMA\Desktop\project_code\code\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 6405.2074ms
[debug]     Load.loadUnit: defsScala took 0.0049ms
[debug] [Loading] Scanning directory C:\Users\PolyakovMA\Desktop\project_code\code
[debug]       Load.loadUnit: mkEval took 0.3545ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtassembly.AssemblyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbtassembly.AssemblyPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,sbtassembly.AssemblyPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.1773 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 42.5133ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\PolyakovMA\Desktop\project_code\code, plugins: List(<none>))) took 47.1892ms
[debug] [Loading] Done in C:\Users\PolyakovMA\Desktop\project_code\code, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2927.1968ms
[debug]     Load.loadUnit: cleanEvalClasses took 9.4899ms
[debug]   Load.loadUnit(file:/C:/Users/PolyakovMA/Desktop/project_code/code/, ...) took 9342.709ms
[debug] Load.apply: load took 9344.6131ms
[debug] Load.apply: resolveProjects took 0.1509ms
[debug] Load.apply: finalTransforms took 36.1672ms
[debug] Load.apply: config.delegates took 0.3451ms
[debug] Load.apply: Def.make(settings)... took 120.3893ms
[debug] Load.apply: structureIndex took 23.5292ms
[debug] Load.apply: mkStreams took 0.0057ms
[info] set current project to ProjectJobs (in build file:/C:/Users/PolyakovMA/Desktop/project_code/code/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63097 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63097, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ProjectJobs (in build file:/C:/Users/PolyakovMA/Desktop/project_code/code/)
[debug] > Exec(idea-shell, None, None)
